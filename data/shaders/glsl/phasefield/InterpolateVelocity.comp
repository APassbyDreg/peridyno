#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#include "SharedDataInFluid.glsl"

layout(std430, binding = 0) buffer CoefOut {
	vec3 vel[ ];
};

layout(std430, binding = 1) buffer VelUIn {
	float vel_u[ ];
};

layout(std430, binding = 2) buffer VelVIn {
	float vel_v[ ];
};

layout(std430, binding = 3) buffer VelWIn {
	float vel_w[ ];
};

layout (binding = 4) uniform UBO {
	Array3DInfo arrayInfo;
} params;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

void main() 
{
    uvec3 id = gl_GlobalInvocationID; 

    Array3DInfo aVelInfo = params.arrayInfo;
    uint i = id.x;
    uint j = id.y;
    uint k = id.z;
	if (!inside(i, j, k, aVelInfo)) 
		return;

    uint nx = aVelInfo.nx;
    uint ny = aVelInfo.ny;
    uint nz = aVelInfo.nz;

    Array3DInfo aUInfo = params.arrayInfo;  aUInfo.nx = nx+1;   aUInfo.nxy = aUInfo.nx * aUInfo.ny;
    Array3DInfo aVInfo = params.arrayInfo;  aVInfo.ny = ny+1;   aVInfo.nxy = aVInfo.nx * aVInfo.ny;
    Array3DInfo aWInfo = params.arrayInfo;  aWInfo.nz = nz+1;   aWInfo.nxy = aWInfo.nx * aWInfo.ny;

    vec3 v;
    v.x = vel_u[INDEX(i, j, k, aUInfo)] + vel_u[INDEX(i + 1, j, k, aUInfo)];
    v.y = vel_v[INDEX(i, j, k, aVInfo)] + vel_v[INDEX(i, j + 1, k, aVInfo)];
    v.z = vel_w[INDEX(i, j, k, aWInfo)] + vel_w[INDEX(i, j, k + 1, aWInfo)];

    vel[INDEX(i, j, k, aVelInfo)] = 0.5*v;
}