#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#include "SharedDataInFluid.glsl"

layout(std430, binding = 0) buffer NormalOut {
	vec3 normals[ ];
};

layout(std430, binding = 1) buffer DensityIn {
	float src[ ];
};

layout (binding = 2) uniform UBO {
	Array3DInfo arrayInfo;
} params;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

void main() 
{
    uvec3 id = gl_GlobalInvocationID;

    Array3DInfo aInfo = params.arrayInfo;
    uint i = id.x;
    uint j = id.y;
    uint k = id.z;
	if (!inside(i, j, k, aInfo)) 
		return;

    uint nx = aInfo.nx;
    uint ny = aInfo.ny;
    uint nz = aInfo.nz;
    uint nxy = aInfo.nxy;

    uint k0 = INDEX(i, j, k, aInfo);

    uint i_minus = clamp(i - 1, 0, nx - 1);
    uint i_plus = clamp(i + 1, 0, nx - 1);

    uint j_minus = clamp(j - 1, 0, ny - 1);
    uint j_plus = clamp(j + 1, 0, ny - 1);

    uint k_minus = clamp(k - 1, 0, nz - 1);
    uint k_plus = clamp(k + 1, 0, nz - 1);

    float norm_x, norm_y, norm_z;

    norm_x = src[INDEX(i_plus, j, k, aInfo)] - src[INDEX(i_minus, j, k, aInfo)];
    norm_y = src[INDEX(i, j_plus, k, aInfo)] - src[INDEX(i, j_minus, k, aInfo)];
    norm_z = src[INDEX(i, j, k_plus, aInfo)] - src[INDEX(i, j, k_minus, aInfo)];

    float l = sqrt(norm_x*norm_x + norm_y*norm_y + norm_z*norm_z);
    if (l < 0.00001)
    {
        norm_x = 0.0f;
        norm_y = 0.0f;
        norm_z = 0.0f;
    }
    else
    {
        norm_x /= l;
        norm_y /= l;
        norm_z /= l;
    }

    normals[k0] = vec3(norm_x, norm_y, norm_z);
}