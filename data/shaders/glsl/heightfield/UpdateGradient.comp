#version 450
#extension GL_GOOGLE_include_directive : enable
#include "../math/Quat.glsl"
#include "SharedDataHeightField.glsl"

#extension GL_EXT_debug_printf : enable

layout(std430, binding = 0) buffer Displacement {
	vec4 displacement[ ];
};


layout(std430, binding = 1) buffer Gradient {
	vec4 gradient[ ];
};

layout (binding = 2) uniform UBO {
	Array2DInfo arrayInfo;
} params;

layout (local_size_x = 16, local_size_y = 16) in;

float fminf(float a, float b)
{
    return a < b ? a : b;
}
float fmaxf(float a, float b)
{
    return a > b ? a : b;
}
void main() {
	uvec3 id = gl_GlobalInvocationID; 
	int i = int(id.x);
	int j = int(id.y);
	
	Array2DInfo ArrayInfo = params.arrayInfo;
	
	if (!inside(i, j, ArrayInfo)) 
		return;
	
	int patchSize = int(ArrayInfo.nx);
	uint index = INDEX(i, j, ArrayInfo);

	int i_minus_one = (i - 1 + patchSize) % patchSize;
	int i_plus_one = (i + 1) % patchSize;
	
	int j_minus_one = (j - 1 + patchSize) % patchSize;
	int j_plus_one = (j + 1) % patchSize;
	
	vec4 Dx = (displacement[i_plus_one + j*patchSize] - displacement[i_minus_one + j*patchSize]) / 2;
	vec4 Dz = (displacement[i + j_plus_one*patchSize] - displacement[i + j_minus_one*patchSize]) / 2;
	
	float la = 0.8f;
	float Jxx = 1 + Dx.x * la;
	float Jyy = 1 + Dz.z * la;
	float Jyx = Dx.z * la;
	float Jxy = Dz.x * la;
	float J = Jxx * Jyy - Jyx * Jxy;
	float breakArea = fminf(fmaxf((0.7f - J)*0.5f, 0.0f), 1.0f);
	float lastZ = gradient[j*patchSize + i].z;
	float currentZ = (lastZ + breakArea)*0.8f;
	
	gradient[index] = vec4(Dx.y, Dz.y, currentZ, J);
}