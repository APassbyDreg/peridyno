#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#include "../rigidbody/SharedData.glsl"
#include "../math/Quat.glsl"

layout(std430, binding = 0) buffer CorrPosOut {
	vec3 corrPos[ ];
};

layout(std430, binding = 1) buffer CenterIn {
	vec3 center[ ];
};

layout(std430, binding = 2) buffer QuatIn {
	vec4 quat[ ];
};

layout(std430, binding = 3) buffer ConstraintsIn {
	ConstraintPair constraints[ ];
};

layout (binding = 4) uniform CNT {
    uint constraintCount;
};

layout (local_size_x = 64) in;

void main() 
{
    uvec3 id = gl_GlobalInvocationID; 

	uint index = id.x;
	if (index >= constraintCount) 
		return;

	ConstraintPair cp = constraints[index];
	int id0 = cp.id0;
	int id1 = cp.id1;

	vec4 quat0 = quat[id0];
	vec4 quat1 = id1 >= 0 ? quat[id1] : vec4(0, 0, 0, 1);	

	vec3 r0 = quat_rotate(quat0, cp.r0.xyz);
	vec3 r1 = quat_rotate(quat1, cp.r1.xyz);
	vec3 r = id1 >= 0 ? center[id1] + r1 - center[id0] - r0 : r1 - center[id0] - r0;

	// if(index == 0)
	// {
	// 	debugPrintfEXT("before: %f %f %f %f\n", quat0.x, quat0.y, quat0.z, quat0.w);
	// 	debugPrintfEXT("after: %f %f %f %f\n",quat[id0].x, quat[id0].y, quat[id0].z, quat[id0].w);
	// 	debugPrintfEXT("r: %f \n", length(r));
	// }

	if (cp.posDOF == 0u) { // P2P(distance), Hinge, ConeTwist, Fixed
		corrPos[index] = r;

		// debugPrintfEXT("correction %d: %f %f %f %f \n", index, length(r), corrPos[index].x, corrPos[index].y, corrPos[index].z);
	}
	else
		corrPos[index] = vec3(0);
}