#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#include "../rigidbody/SharedData.glsl"
#include "../math/Quat.glsl"

layout(std430, binding = 0) buffer LambdaPositionOut {
	vec3 lambdaDeltaPosition[ ];
};

layout(std430, binding = 1) buffer MassInvIn {
	float massInv[ ];
};

layout(std430, binding = 2) buffer InertiaWorldIn {
	mat3 inertiaWorldInv[ ];
};

layout(std430, binding = 3) buffer ConstraintsIn {
	ConstraintPair constraints[ ];
};

layout(std430, binding = 4) buffer NumJointsIn {
	uint nJoints[ ];
};

layout(std430, binding = 5) buffer CorrPosIn {
	vec3 corrPos[ ];
};

layout (binding = 6) uniform UBO {
	RigidBodySolverState state;
} params;

layout (binding = 7) uniform CNT {
    uint constraintCount;
};

layout (local_size_x = 64) in;

void main() 
{
    uvec3 id = gl_GlobalInvocationID; 

	uint index = id.x;
	if (index >= constraintCount) 
		return;

	ConstraintPair cp = constraints[index];
	int id0 = cp.id0;
	int id1 = cp.id1;

	vec3 r0 = cp.r0.xyz;
	vec3 r1 = cp.r1.xyz;

	float massInv0 = massInv[id0] * nJoints[id0];
	float massInv1 = id1 >= 0 ? massInv[id1] * nJoints[id1] : 0;

	mat3 I0 = inertiaWorldInv[id0] * nJoints[id0];
	mat3 I1 = id1 >= 0 ? inertiaWorldInv[id1] * nJoints[id1] : mat3(0);

	float d = length(corrPos[index]);
	vec3 n = d > EPSILON ? normalize(corrPos[index]) : vec3(0, 0, 0);

	vec3 r0n = cross(r0, n);
	vec3 r1n = cross(r1, n);

	float w0 = massInv0 + dot(r0n, I0*r0n);
	float w1 = massInv1 + dot(r1n, I1*r1n);

	float dt = params.state.dt;
	float alpha = 1.0;

	lambdaDeltaPosition[index] = alpha * (d / (w0 + w1)) * n;

	// debugPrintfEXT("d: %f; len: %f \n", d, length(n));
	// debugPrintfEXT("r0: %f %f %f \n", r0.x, r0.y, r0.z);
	// debugPrintfEXT("massInv0: %d \n", nJoints[id0]);
	// debugPrintfEXT("w0: %f \n", w0);
	// debugPrintfEXT("w1: %f \n", w1);
	// debugPrintfEXT("w0 + w1: %f \n", w0 + w1);
	// debugPrintfEXT("force %d: %f %.10f %f \n", index, lambdaDeltaPosition[index].x, lambdaDeltaPosition[index].y, lambdaDeltaPosition[index].z);
}