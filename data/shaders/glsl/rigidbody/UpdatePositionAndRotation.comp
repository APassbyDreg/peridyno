#version 450
#extension GL_GOOGLE_include_directive : enable
#include "SharedData.glsl"
#include "../math/Quat.glsl"

layout(std430, binding = 0) buffer CenterIO {
	vec3 center[ ];
};

layout(std430, binding = 1) buffer QuatIO {
	vec4 quat[ ];
};

layout(std430, binding = 2) buffer InertiaWorldInvIn {
	mat3 inertiaWorldInv[ ];
};

layout(std430, binding = 3) buffer DpIn {
	vec3 dPos[ ];
};

layout(std430, binding = 4) buffer DqIn {
	vec4 dQuat[ ];
};

layout(std430, binding = 5) buffer InertiaBodyInvIn {
	mat3 inertiaBodyInv[ ];
};

layout(std430, binding = 6) buffer BodyTypeIn {
	uint type[ ];
};

layout (local_size_x = 64) in;

layout (push_constant) uniform PushConsts {
	uint bodyCount;
} pushConsts;


void main() 
{
	uvec3 id = gl_GlobalInvocationID; 

	uint index = id.x;
	if (index >= pushConsts.bodyCount) 
		return;

	if (type[index] <= Kinematic) return;	

    center[index] += dPos[index];

	vec4 quat_i = quat[index];
    vec4 quat_new = quat_normalize(quat_i+dQuat[index]);
	quat[index] = quat_new;

	mat3 R = quat_to_mat3(quat_new);
	mat3 invI = inertiaBodyInv[index];

	inertiaWorldInv[index] = R*invI*transpose(R);

}