#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#include "SharedData.glsl"

layout(std430, binding = 0) buffer BoxOut {
	Box boxes[ ];
};

layout(std430, binding = 1) buffer CapsuleOut {
	Capsule capsules[ ];
};

layout(std430, binding = 2) buffer SphereOut {
	Sphere spheres[ ];
};

layout(std430, binding = 3) buffer CenterIn {
	vec3 centers[ ];
};

layout(std430, binding = 4) buffer RotIn {
	vec4 quat[ ];
};

layout (binding = 5) uniform UniformOffset {
	ElementOffset eleOffset;
} params;

layout (local_size_x = 64) in;

layout (push_constant) uniform PushConsts {
	uint totalNum;
} pushConsts;

void main() 
{
	uvec3 id = gl_GlobalInvocationID; 

	uint index = id.x;
	if (index >= pushConsts.totalNum) 
		return;

	ElementOffset offset = params.eleOffset;
	
	if(index < offset.box_bound)
	{
		uint bId = index;
		Box box = boxes[bId];
		box.center = vec4(centers[index].xyz, 0);
		box.rot = quat[index];

		boxes[index] = box;

		debugPrintfEXT("%d %f %f %f \n", index, quat[index].x, quat[index].y, quat[index].z);
		//debugPrintfEXT("%d %f %f %f \n", index, centers[index].x, centers[index].y, centers[index].z);
	}
	else if(index < offset.capsule_bound)
	{
		uint cId = index - offset.box_bound;
		Capsule capsule = capsules[cId];
		capsule.center = vec4(centers[index].xyz, 0);
		capsule.rot = quat[index];

		capsules[cId] = capsule;

//		debugPrintfEXT("%d %f %f %f \n", index, centers[index].x, centers[index].y, centers[index].z);
	}
	else if(index < offset.sphere_bound)
	{
		uint sId = index - offset.capsule_bound;
		Sphere sphere = spheres[sId];
		sphere.center = centers[index].xyz;
		sphere.rot = quat[index];

		spheres[sId] = sphere;
	}
}