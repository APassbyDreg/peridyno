#version 450
#extension GL_GOOGLE_include_directive : enable
#include "SharedData.glsl"

layout(std430, binding = 0) buffer JOut {
	vec3 J[ ];
};

layout(std430, binding = 1) buffer BOut {
	vec3 B[ ];
};

layout(std430, binding = 2) buffer MassInvIn {
	float massInv[ ];
};

layout(std430, binding = 3) buffer MassIn {
	mat3 inertiaInv[ ];
};

layout(std430, binding = 4) buffer CenterIn {
	vec3 center[ ];
};

layout(std430, binding = 5) buffer ContactsIn {
	ContactPair contacts[ ];
};

layout (binding = 6) uniform UBO {
    uint contactNum;
};

layout (local_size_x = 64) in;

void main() 
{
    uvec3 id = gl_GlobalInvocationID; 

	uint index = id.x;
	if (index >= contactNum) 
		return;

    ContactPair contact = contacts[index];

    if (contact.cType == CT_BOUNDARY) {
        vec3 n0 = contact.normal0.xyz;
        vec3 r0 = contact.pos0.xyz - center[contact.id0];
        J[4*index] = -n0;
        J[4*index+1] = -cross(r0, n0);
        J[4*index+2] = vec3(0);
        J[4*index+3] = vec3(0);

        float massInv_i = massInv[contact.id0];
        mat3 inertiaInv_i = inertiaInv[contact.id0];
        B[4*index] = -massInv_i*n0;
        B[4*index+1] = -inertiaInv_i*cross(r0, n0);
        B[4*index+2] = vec3(0);
        B[4*index+3] = vec3(0);
    }

    if (contact.cType == CT_NONPENETRATION || contact.cType == CT_FRICTION) {
        vec3 n0 = contact.normal0.xyz;
        vec3 r0 = contact.pos0.xyz - center[contact.id0];
        J[4*index] = -n0;
        J[4*index+1] = -cross(r0, n0);

        vec3 r1 = contact.pos1.xyz - center[contact.id1];
        J[4*index+2] = n0;
        J[4*index+3] = cross(r1, n0);


        float massInv_i = massInv[contact.id0];
        mat3 inertiaInv_i = inertiaInv[contact.id0];
        B[4*index] = -massInv_i*n0;
        B[4*index+1] = -inertiaInv_i*cross(r0, n0);

        float massInv_j = massInv[contact.id1];
        mat3 inertiaInv_j = inertiaInv[contact.id1];
        B[4*index+2] = massInv_j*n0;
        B[4*index+3] = inertiaInv_j*cross(r1, n0);
    }
}        