#version 450
#extension GL_GOOGLE_include_directive : enable
#include "SharedData.glsl"
#include "../math/Quat.glsl"

layout(std430, binding = 0) buffer CenterIO {
	vec3 center[ ];
};

layout(std430, binding = 1) buffer QuatIO {
	vec4 quat[ ];
};

layout(std430, binding = 2) buffer InertiaWorldOut {
	mat3 inertiaWorldInv[ ];
};

layout(std430, binding = 3) buffer InertiaIn {
	mat3 inertiaBodyInv[ ];
};

layout(std430, binding = 4) buffer VelocityIn {
	vec3 velocity[ ];
};

layout(std430, binding = 5) buffer AngularVelocityIn {
	vec3 angularVelocity[ ];
};

layout(std430, binding = 6) buffer BodyTypeIn {
	uint type[ ];
};

layout (binding = 7) uniform UBO {
	RigidBodySolverState state;
} params;

layout (local_size_x = 64) in;

layout (push_constant) uniform PushConsts {
	uint bodyCount;
} pushConsts;


void main() 
{
	uvec3 id = gl_GlobalInvocationID; 

	uint index = id.x;
	if (index >= pushConsts.bodyCount) 
		return;

	if (type[index] == Static) return;	

    float dt = params.state.dt;

    center[index] += dt*velocity[index];

    // update angular velocity
	vec3 omega = angularVelocity[index].xyz;
	mat3 invI = inertiaBodyInv[index];
	// mat3 I = inverse(invI);
	vec4 quat_old = quat[index];
	// mat3 R_old = quat_to_mat3(quat_old);
	// mat3 inertiaWorld = R_old*I*transpose(R_old);
	// omega += dt * inertiaWorldInv[index] * (-cross(omega, (inertiaWorld*omega)));
	
	quat_old += 0.5*dt*quat_mul(vec4(omega, 0.0), quat_old);
	vec4 quat_new = quat_normalize(quat_old);
    quat[index] = quat_new;
	
	mat3 R = quat_to_mat3(quat_new);
	inertiaWorldInv[index] = R*invI*transpose(R);
}